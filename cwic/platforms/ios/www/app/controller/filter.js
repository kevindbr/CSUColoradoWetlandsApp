/*
 * File: app/controller/filter.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CWIC.controller.filter', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'filter'
        ],

        refs: {
            textName: '#textName',
            textFamily: '#textFamily',
            selectSection: '#selectSection',
            selectFruit: '#selectFruit',
            selectArrangement: '#selectArrangement',
            selectDivision: '#selectDivision',
            selectShape: '#selectShape',
            selectSize: '#selectSize',
            selectRegion: '#selectRegion',
            selectCounty: '#selectCounty',
            numElevMinFeet: '#numElevMinFeet',
            numElevMaxFeet: '#numElevMaxFeet',
            selectEcologicalSystem: '#selectEcologicalSystem',
            selectNativity: '#selectNativity',
            selectWetStatus: '#selectWetStatus',
            textGrank: '#textGrank',
            textSrank: '#textSrank',
            selectFederalStatus: '#selectFederalStatus',
            selectAnimalUse: '#selectAnimalUse',
            plantList: 'list[id=plantlist]',
            fieldGuide: '#fieldguide'
        },

        control: {
            "button": {
                tap: 'onButtonTap'
            }
        }
    },

    onButtonTap: function(button, e, eOpts) {
        if (button.config.itemId === "filterback"){
            this.getFieldGuide().animateActiveItem(CWIC.util.Cwic.plantListTab,  {type: 'slide', direction: 'down'});
        }
         else if (button.config.itemId === "apply"){

             //Start the debugger in Chrome
             //debugger;

             var filterText="";
             var plantList=this.getPlantList();

             var nameFilter = this.getTextName().getValue();
             var familyFilter = this.getTextFamily().getValue();
             var sectionFilter = this.getSelectSection().getValue();
             var nativityFilter = this.getSelectNativity().getValue();
             var statusFilter = this.getSelectFederalStatus().getValue();
             var countyFilter = this.getSelectCounty().getValue();
             var animalFilter = this.getSelectAnimalUse().getValue();
             var systemFilter = this.getSelectEcologicalSystem().getValue();
             var minElevFilter = this.getNumElevMinFeet().getValue();
             var maxElevFilter = this.getNumElevMaxFeet().getValue();
             var fruitFilter = this.getSelectFruit().getValue();
             var divisionFilter = this.getSelectDivision().getValue();
             var shapeFilter = this.getSelectShape().getValue();
             var arrangementFilter = this.getSelectArrangement().getValue();
             var sizeFilter = this.getSelectSize().getValue();
             var regionFilter = this.getSelectRegion().getValue();
             var srankFilter = this.getTextSrank().getValue();
             var grankFilter = this.getTextGrank().getValue();
             var wetstatusFilter = this.getSelectWetStatus().getValue();

             if (nameFilter!=="") filterText+="Name contains '" + nameFilter + "'; ";
             if (familyFilter!=="") filterText+= "Family contains '" + familyFilter + "'; ";
             if (sectionFilter!=="all") filterText+= sectionFilter + "; ";
             if (nativityFilter!=="all") filterText+= nativityFilter + "; ";
             if (statusFilter!=="all") filterText+= statusFilter + "; ";
             if (countyFilter!=="all") filterText+=countyFilter + " county; ";
             if (animalFilter!=="all") filterText+=animalFilter + "; ";
             if (systemFilter!=="all") filterText+="in '" + systemFilter + "', ";
             if (minElevFilter!==null) filterText+="Above " + minElevFilter + "ft; ";
             if (maxElevFilter!==null) filterText+="Below " + maxElevFilter + "ft; ";
             if (fruitFilter!==0)
             {
                 var fruitArray = ["All", "White", "Orange", "Pink", "Red", "Purple", "Blue", "Yellow", "Brown", "Green"];
                 filterText+="'" + fruitArray[fruitFilter] + "' fruit/flowers; ";
             }
             if (divisionFilter!==0)
             {
                 var divisionArray = ["All", "Simple","Compound"];
                 filterText+="'" + divisionArray[divisionFilter-10] + "' leaf division; ";
             }
             if (shapeFilter!==0)
             {
                 var shapeArray = ["All", "Linear/Lanceolate/Elliptic","Round/Ovate","Wide Base","Wide Tip","Lobed","Palmate","Pinnate/Ternate"];
                 filterText+="'" + shapeArray[shapeFilter-12] + "' leaf shape; ";
             }
             if (arrangementFilter!==0)
             {
                 var arrangementArray = ["All", "Alternate","Opposite","Whorled","Basal"];
                 filterText+="'" + arrangementArray[arrangementFilter-20] + "' arrangement; ";
             }
             if (sizeFilter!==0)
             {
                 var sizeArray = ["All", "Very small (< 5 cm)","Small (5 -< 20 cm)","Medium (20 -< 50 cm)","Large ( >= 50 cm)"];
                 filterText+="'" + sizeArray[sizeFilter-24] + "'; ";
             }
             if (regionFilter!==0)
             {
                 var regionArray = ["All", 'Eastern Plains','Rocky Mountains','Colorado Plateau'];
                 filterText+="'" + regionArray[regionFilter-186] + "' region; ";
             }
             if (srankFilter!=="") filterText+="'" + srankFilter + "' state rank; ";
             if (grankFilter!=="") filterText+="'" + grankFilter + "' global rank; ";
             if (wetstatusFilter!=="all") filterText+="'" + wetstatusFilter + "' wetland status; ";

        //      debugger;

             //if (filterText==="") filterText="Filters: None";
             //Clear the filter first, so that it doesn't...I dunno. It doesn't work without clearing it.
             plantList.getStore().clearFilter();

             //Filter the plant list "store"
             //  The function checks every record against the criteria, returns true or false to indicate whether to display
             plantList.getStore().filterBy(function myFilter(record,id){

                 var nameFlag = false;
                 var familyFlag = false;
                 var sectionFlag = false;
                 var nativityFlag = false;
                 var federalStatusFlag = false;
                 var countyFlag = false;
                 var animalUseFlag = false;
                 var ecologicalSystemFlag = false;
                 var elevMinFeetFlag = false;
                 var elevMaxFeetFlag = false;
                 var fruitFlag = false;
                 var divisionFlag = false;
                 var shapeFlag = false;
                 var arrangementFlag = false;
                 var sizeFlag = false;
                 var regionFlag = false;
                 var grankFlag = false;
                 var srankFlag = false;
                 var wetstatusFlag = false;

                 //Start the debugger in Chrome
        //          debugger;

                 //Search Names: SciNameAuthor, CommonName, and the array of SynSciNameAuthor
                 if (record.get("SciNameNoAuthor").toLowerCase().search(nameFilter.toLowerCase())!=-1) nameFlag=true;
                 if (record.get("CommonName").toLowerCase().search(nameFilter.toLowerCase())!=-1) nameFlag=true;
                 if (record.get("Synonyms").toLowerCase().search(nameFilter.toLowerCase())!=-1) nameFlag=true;


                 //Filter logic for synonyms in an array (the way we used to store them)
                 /*if(this.getTextName().getValue()!=="")
                 {
                     var synsArray=record.get("Synonyms");

                     Ext.Array.each(synsArray, function filterNames(element, index) {
                         //console.log("Index = " + index);
                         //console.log("Element = " + element.SynSciNameAuthor);

                         if (element.SynSciNameAuthor.toLowerCase().search(this.getTextName().getValue().toLowerCase())!=-1)
                         {
                             nameFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else nameFlag = true;
                 */

                 //Family
                 if (record.get("Family").toLowerCase().search(familyFilter.toLowerCase())!=-1) familyFlag=true;

                 //Section
                 if ((sectionFilter=="all")||(record.get("Sections").search(this.getSelectSection().getValue())!=-1)) sectionFlag=true;

                 //Nativity
                 if ((nativityFilter=="all")||
                     (record.get("Nativity").search(nativityFilter)!=-1)||
                     (record.get("NoxiousWeed").search(nativityFilter)!=-1)) nativityFlag=true;

                 //FederalStatus
                 if ((statusFilter=="all")||(record.get("FederalStatus").search(statusFilter)!=-1)) federalStatusFlag=true;

                 //If the name isn't blank, search the array of synonyms
                 if(countyFilter!=="all")
                 {
                     var countyArray=record.get("Counties");

                     Ext.Array.each(countyArray, function filterCounties(element, index) {
                         //console.log("Index = " + index);
                         //console.log("Element = " + element.SynSciNameAuthor);

                         if (element.Name.search(countyFilter)!=-1)
                         {
                             countyFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else countyFlag = true;

                 //Animal Use
                 if ((animalFilter=="all")||(record.get("AnimalUse").search(animalFilter)!=-1)) animalUseFlag=true;

                 //Ecological system
                 if ((systemFilter=="all")||(record.get("EcologicalSystems").search(systemFilter)!=-1)) ecologicalSystemFlag=true;

                 //Min elevation: these LOOK backwards, but they aren't you have to compare the min to the max
                 if ((minElevFilter===null) ||(record.get("ElevMaxFeet")===0) || (record.get("ElevMaxFeet") >= (minElevFilter))) elevMinFeetFlag=true;

                 //Max elevation
                 if ((maxElevFilter===null)||(record.get("ElevMinFeet")===0) || (record.get("ElevMinFeet") <= (maxElevFilter)) ) elevMaxFeetFlag=true;

                 //If the name isn't blank, search the array of fruit/flower attribute values
                 if(fruitFilter!==0)
                 {

                     var plantsFruitsArray=record.get("Fruits");

                     Ext.Array.each(plantsFruitsArray, function filterFruits(element, index) {
                         if (element.ValueID==fruitFilter)
                         {
                             fruitFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else fruitFlag = true;

                 //If the name isn't blank, search the array of division attribute values
                 if(divisionFilter!==0)
                 {

                     var plantsDivisionArray=record.get("Division");

                     Ext.Array.each(plantsDivisionArray, function filterDivision(element, index) {
                         if (element.ValueID==divisionFilter)
                         {
                             divisionFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else divisionFlag = true;

                 //If the name isn't blank, search the array of shape attribute values
                 if(shapeFilter!==0)
                 {

                     var plantShapeArray=record.get("Shape");

                     Ext.Array.each(plantShapeArray, function filterShape(element, index) {
                         if (element.ValueID==shapeFilter)
                         {
                             shapeFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else shapeFlag = true;

                 //If the name isn't blank, search the array of arrangement attribute values
                 if(arrangementFilter!==0)
                 {

                     var plantArrangementArray=record.get("Arrangement");

                     Ext.Array.each(plantArrangementArray, function filterArrangement(element, index) {
                         if (element.ValueID==arrangementFilter)
                         {
                             arrangementFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else arrangementFlag = true;

                 //If the name isn't blank, search the array of arrangement attribute values
                 if(sizeFilter!==0)
                 {

                     var plantSizeArray=record.get("Size");

                     Ext.Array.each(plantSizeArray, function filterSize(element, index) {
                         if (element.ValueID==sizeFilter)
                         {
                             sizeFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else sizeFlag = true;

                 //If the region isn't blank, search the array of arrangement attribute values
                 if(regionFilter!==0)
                 {

                     var plantRegionArray=record.get("Regions");

                     Ext.Array.each(plantRegionArray, function filterSize(element, index) {
                         if (element.GeoUnitID==regionFilter)
                         {
                             regionFlag = true;
                             return false;
                         }

                     }, this);
                 }
                 else regionFlag = true;

        //          debugger;


                 //Srank
                 if ((srankFilter=="all")||(record.get("COSRank").search(srankFilter.replace("?", "\\\\?"))!=-1)) srankFlag=true;

                 //Grank
                 if ((grankFilter=="all")||(record.get("GRank").search(grankFilter.replace("?", "\\\\?"))!=-1)) grankFlag=true;

                 //Wetland Indicator Status
                 if ((wetstatusFilter=="all")||(record.get("AWWetCode").search(wetstatusFilter)!=-1)||(record.get("GPWetCode").search(wetstatusFilter)!=-1)||(record.get("WMVCWetCode").search(wetstatusFilter)!=-1)) wetstatusFlag=true;


                 //If this record meets all the criteria
                 if ((nameFlag===true)&&(nativityFlag===true)&&
                     (sectionFlag===true)&&(familyFlag===true)&&
                     (elevMinFeetFlag===true)&&(elevMaxFeetFlag===true)&&
                     (federalStatusFlag===true) && (animalUseFlag===true)&&
                     (countyFlag===true) && (ecologicalSystemFlag===true) &&
                     (fruitFlag===true) && (divisionFlag===true) && (shapeFlag===true)&&
                     (arrangementFlag===true)&&(sizeFlag===true)&&(regionFlag===true)&&
                     (srankFlag===true)&&(grankFlag===true)&&(wetstatusFlag===true)) return true;
                 else return false;


             },this);


             //debugger;

             //Need to reset the position on the list to the top, or you are really screwed.
             this.getPlantList().scrollToRecord(this.getPlantList().getStore().getAt(0));

             var listLength=this.getPlantList().getStore().getCount();

             //Set the subtitle text
             if (filterText==="") this.getFieldGuide().down('#resultsTitleBar').setHtml("Results: "+listLength+", Filters: None");
             else this.getFieldGuide().down('#resultsTitleBar').setHtml("Results: "+listLength+", Filters: " + filterText.replace(/(^\s*;)|(;\s*$)/g, ''));

             //Animate to the plant list tab
             this.getFieldGuide().animateActiveItem(CWIC.util.Cwic.plantListTab,  {type: 'slide', direction: 'down'});



         }
         else if (button.config.itemId === "reset"){
             //alert("Reset");
             //debugger;

             //Clear the values in the form fiels here
             this.getTextName().setValue("");
             this.getTextFamily().setValue("");
             this.getSelectSection().setValue("all");
             this.getSelectNativity().setValue("all");
             this.getSelectFederalStatus().setValue("all");
             this.getSelectCounty().setValue("all");
             this.getSelectAnimalUse().setValue("all");
             this.getSelectEcologicalSystem().setValue("all");
             this.getNumElevMinFeet().setValue("");
             this.getNumElevMaxFeet().setValue("");
             this.getSelectFruit().setValue("all");
             this.getSelectDivision().setValue("all");
             this.getSelectShape().setValue("all");
             this.getSelectArrangement().setValue("all");
             this.getSelectSize().setValue("all");
             this.getSelectRegion().setValue("all");
             this.getTextGrank().setValue("");
             this.getTextSrank().setValue("");
             this.getSelectWetStatus().setValue("all");

             //Clear the filter
             this.getPlantList().getStore().clearFilter();
             var listLength=this.getPlantList().getStore().getCount();

             //Clear the title text;
             this.getFieldGuide().down('#resultsTitleBar').setHtml("Results: "+listLength+", Filters: None" );

             //Scroll to top?
             this.getPlantList().getScrollable().getScroller().scrollTo(0, 0);

         }

    }

});