/*
 * File: app/controller/home.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CWIC.controller.home', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'home'
        ],

        refs: {
            plantList: 'list[id=plantlist]',
            selectCounty: '#selectCounty',
            fieldGuide: '#fieldguide',
            numElevMinFeet: '#numElevMinFeet',
            numElevMaxFeet: '#numElevMaxFeet'
        },

        control: {
            "button": {
                tap: 'onButtonTap'
            }
        }
    },

    onButtonTap: function(button, e, eOpts) {
        if (button.config.itemId === "fieldGuideButton") {

            var fieldGuide = this.getFieldGuide();

            //Clear the filter first, in case we set it in the map
            this.getPlantList().getStore().clearFilter();

            //Get the length of the plant list (for the secondary title bar)
            var listLength=this.getPlantList().getData().length;

            fieldGuide.down('#resultsTitleBar').setHtml("Results: "+listLength+", Filters: None");

            //debugger;

            fieldGuide.animateActiveItem(CWIC.util.Cwic.plantListTab,  {type: 'fade'});
        }
        else if (button.config.itemId === "introButton") {

            var fieldGuide = this.getFieldGuide();

            fieldGuide.down('#intro').setHtml(CWIC.util.Cwic.introText);

            fieldGuide.animateActiveItem(CWIC.util.Cwic.introTab,  {type: 'fade'});
        }
        else if (button.config.itemId === "acknowButton") {

            var fieldGuide = this.getFieldGuide();

            fieldGuide.down('#acknowledgements').setHtml(CWIC.util.Cwic.acknowledgeText);

            fieldGuide.animateActiveItem(CWIC.util.Cwic.acknowTab,  {type: 'fade'});
        }
        else if (button.config.itemId === "mapsButton") {

            //First animate the tab, so the map will inherit the parent width properly
            var fieldGuide = this.getFieldGuide();
            var plantList = this.getPlantList();
            var countyCombo = this.getSelectCounty();
            var minFeetEntry = this.getNumElevMinFeet();
            var maxFeetEntry = this.getNumElevMaxFeet();

            fieldGuide.animateActiveItem(CWIC.util.Cwic.mapsTab,  {type: 'fade'});

            fieldGuide.down('#maps').setHtml("<div id='mapDiv' style='position:absolute; height:100%; width:100%;'></div>");

            //Instantiate the map
            var map;
            var queryTask;
            var query;
            var countyName;

            var queryElevTask;
            var queryElev;
            var elev;

             require([
                "esri/map",
                "esri/layers/ArcGISDynamicMapServiceLayer",
                "esri/layers/ArcGISTiledMapServiceLayer",
                "esri/tasks/QueryTask",
                "esri/tasks/query",
                "dojo/domReady!"
            ],
            function (Map, ArcGISTiledMapServiceLayer, ImageParameters, QueryTask, Query) {

                map = new Map("mapDiv", {
                    basemap: "satellite",
                    center: [-105.0781, 40.5592],
                    zoom: 16
                });

                //The county layer we query against
                queryTask = new QueryTask("http://cnhp.colostate.edu/arcgis/rest/services/wetlands/CO_counties_Appservice/MapServer/0");

                query = new Query();
                query.returnGeometry = false;
                query.outFields = [
                  "County_Name"
                ];

                //The elev layer we query against
                queryElevTask = new QueryTask("http://cnhp.colostate.edu/arcgis/rest/services/wetlands/elevation_poly_Appservice/MapServer/0");

                queryElev = new Query();
                queryElev.returnGeometry = false;
                queryElev.outFields = [
                  "elevation"
                ];

                //Add the layer for the wetlands
                var dynamicMapServiceLayer = new ArcGISTiledMapServiceLayer("http://cnhp.colostate.edu/arcgis/rest/services/wetlands/Colorado_Wetlands_NWI/MapServer", {
                    opacity: 0.75
                });

                map.addLayer(dynamicMapServiceLayer);
            });

            //Instantiate the Geolocation util, set the center of the map
            var geo = Ext.create('Ext.util.Geolocation', {
                autoUpdate: false,
                allowHighAccuracy: true,
                listeners: {
                    locationupdate: function(geo) {

                        var currentLat = geo.getLatitude();
                        var currentLng =  geo.getLongitude();
                        var altitude = geo.getAltitude();
                        var speed = geo.getSpeed();
                        var heading= geo.getHeading();

                        //Set up a esri point for this location
                        var point;
                        require(["esri/geometry/Point"], function(Point) {
                            point = new Point(currentLng, currentLat);
                            //point = new Point(-105, 40); // A point in broomfield (has three plants, for testing)

                        });

                        //Center the map at this location
                        map.centerAt(point);

                        //Find out what county you are in
                        query.geometry=point;
                        queryTask.execute(query, showResults);

                        //Find out what county you are in
                        queryElev.geometry=point;
                        queryElevTask.execute(queryElev, showResults2);

                        function showResults (results) {

                            countyName = results.features[0].attributes.County_Name;
                            //console.log("County Name 1 " + countyName);

                            //Clear the filter first, so that it doesn't...I dunno. It doesn't work without clearing it.
                            plantList.getStore().clearFilter();

                            //Filter the plant list "store"
                            //  The function checks every record against the criteria, returns true or false to indicate whether to display
                            plantList.getStore().filterBy(function myFilter(record,id){

                                var countyFlag = false;
                                 //If the name isn't blank, search the array of synonyms
                                 if(countyName!=="")
                                 {
                                     var countyArray=record.get("Counties");

                                     Ext.Array.each(countyArray, function filterCounties(element, index) {
                                         //console.log("Index = " + index);
                                         //console.log("Element = " + element.SynSciNameAuthor);

                                         if (element.Name.search(countyName)!=-1)
                                         {
                                             countyFlag = true;
                                             return false;
                                         }

                                     }, this);
                                 }
                                 else countyFlag = true;

                                 //If this record meets all the criteria
                                 if (countyFlag===true) return true;
                                 else return false;


                             },this);

                             //Get the number of plants
                             var listLength=plantList.getStore().getCount();

                             //Set the filter title bar
                             fieldGuide.down('#resultsTitleBar').setHtml(countyName + " county");

                             //Set the county filter default to the county you're in right now
                             countyCombo.setValue(countyName);

                        }
                        function showResults2 (results) {

                            elev = results.features[0].attributes.elevation;
                            var minElev = elev - 500;
                            var maxElev = elev + 500;

                            //Filter the plant list "store"
                            //  The function checks every record against the criteria, returns true or false to indicate whether to display
                            plantList.getStore().filterBy(function myFilter(record,id){

                                var elevFlag = false;

                                //If the name isn't blank, search the array of synonyms
                                if(elev!=="")
                                {
                                    if (((record.get("ElevMaxFeet") >= minElev)|| (record.get("ElevMaxFeet")===0)) &&
                                        ((record.get("ElevMinFeet") <= maxElev)|| (record.get("ElevMinFeet")===0))) elevFlag=true;


                                }
                                else elevFlag = true;

                                //If this record meets all the criteria
                                if (elevFlag===true) return true;
                                else return false;


                            },this);

                            //Get the number of plants
                            var listLength=plantList.getStore().getCount();

                            //Set the filter title bar
                            var titleText = fieldGuide.down('#resultsTitleBar')._html;
                            fieldGuide.down('#resultsTitleBar').setHtml("Results: "+listLength+", " + titleText+ "; Above " + minElev + "ft; Below " + maxElev + "ft; ");

                            //Set the elev filter defaults to where you are in right now
                            minFeetEntry.setValue(minElev);
                            maxFeetEntry.setValue(maxElev);

                            //Need to reset the position on the list to the top, or you are really screwed.
                            plantList.scrollToRecord(plantList.getStore().getAt(0));

                        }

                    },
                    locationerror: function(geo, bTimeout, bPermissionDenied, bLocationUnavailable, message) {
                        if(bTimeout)
                            Ext.Msg.alert('Timeout occurred',"Could not get current position");
                        else
                            alert('Error occurred.');
                    }


                }

            });

            geo.updateLocation();

            //Set the county filter default to the county you're in right now
            //this.getSelectCounty().setValue(countyName);

        }
        else if (button.config.itemId === "homeButton"){
            this.getFieldGuide().animateActiveItem(CWIC.util.Cwic.homeTab,  {type: 'fade'});
        }
        else if (button.config.itemId === "ecosystemsButton") {

            var fieldGuide = this.getFieldGuide();

            fieldGuide.animateActiveItem(CWIC.util.Cwic.ecosystemsTab,  {type: 'fade'});
        }
    }

});